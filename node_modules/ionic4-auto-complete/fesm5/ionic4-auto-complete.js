import { __assign, __decorate } from 'tslib';
import { EventEmitter, Input, Output, ViewChild, ElementRef, HostListener, Component, Pipe, Injectable, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { IonicModule } from '@ionic/angular';
import { Subject, from, Observable } from 'rxjs';
import { finalize } from 'rxjs/operators';

var AutoCompleteOptions = /** @class */ (function () {
    function AutoCompleteOptions() {
        this.animated = false;
        this.color = null;
        this.autocomplete = 'off';
        this.autocorrect = 'off';
        this.cancelButtonIcon = 'arrow-round-back';
        this.cancelButtonText = 'Cancel';
        this.clearIcon = 'close-circle';
        this.clearInput = false;
        this.clearOnEdit = false;
        this.debounce = 250;
        this.mode = 'md';
        this.noItems = 'No items found.';
        this.placeholder = 'Buscar';
        this.searchIcon = 'search';
        this.showCancelButton = false;
        this.spellcheck = 'off';
        this.type = 'search';
        this.value = '';
    }
    return AutoCompleteOptions;
}());

var AutoCompleteStyles = /** @class */ (function () {
    function AutoCompleteStyles() {
        this.list = {};
        this.listItem = {};
        this.searchbar = {};
    }
    return AutoCompleteStyles;
}());

var AutoCompleteComponent = /** @class */ (function () {
    /**
     * Create a new instance
     */
    function AutoCompleteComponent() {
        this.alwaysShowList = false;
        this.autoFocusSuggestion = true;
        this.enableBrowserAutoComplete = false;
        this.clearInvalidInput = true;
        this.disabled = false;
        this.exclude = [];
        this.frontIcon = false;
        this.hideListOnSelection = true;
        this.location = 'auto';
        this.maxResults = 8;
        this.maxSelected = null;
        this.multi = false;
        this.name = '';
        this.removeButtonClasses = '';
        this.removeButtonColor = 'primary';
        this.removeButtonIcon = 'close-circle';
        this.removeButtonSlot = 'end';
        this.removeDuplicateSuggestions = true;
        this.selectOnTabOut = true;
        this.styles = new AutoCompleteStyles;
        this.useIonInput = false;
        this.autocompleteOptions = new AutoCompleteOptions();
        this.onTouchedCallback = false;
        this.onChangeCallback = false;
        this.hasFocus = false;
        this.isLoading = false;
        this.focusedOption = -1;
        this.showSuggestions = false;
        this.showListChanged = false;
        this.autoBlur = new EventEmitter();
        this.autoFocus = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ionAutoInput = new EventEmitter();
        this.itemsChange = new EventEmitter();
        this.itemsCleared = new EventEmitter();
        this.itemsHidden = new EventEmitter();
        this.itemRemoved = new EventEmitter();
        this.itemSelected = new EventEmitter();
        this.itemsShown = new EventEmitter();
        this.modelChange = new EventEmitter();
        this.keyword = '';
        this.suggestions = [];
        this.autocompleteOptions = new AutoCompleteOptions();
        this.defaultOpts = new AutoCompleteOptions();
        this.selected = [];
    }
    AutoCompleteComponent_1 = AutoCompleteComponent;
    Object.defineProperty(AutoCompleteComponent.prototype, "model", {
        get: function () {
            var model = this.selected;
            if (!this.multi && typeof this.selected.length !== 'undefined') {
                if (this.selected.length === 0) {
                    model = null;
                }
                else {
                    model = this.selected[0];
                }
            }
            return model;
        },
        set: function (selected) {
            if (typeof selected !== 'undefined' && selected !== null) {
                this.selected = selected;
                this.keyword = this.getLabel(selected);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteComponent.prototype, "options", {
        set: function (options) {
            this.autocompleteOptions = new AutoCompleteOptions();
            var keys = Object.keys(this.autocompleteOptions);
            var keysLength = keys.length;
            for (var i = 0; i < keysLength; i++) {
                var key = keys[i];
                if (typeof options[key] !== 'undefined') {
                    this.autocompleteOptions[key] = options[key];
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteComponent.prototype, "eager", {
        set: function (eager) {
            if (eager) {
                this.getItems(null, false);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteComponent.prototype, "showList", {
        get: function () {
            return this.showSuggestions;
        },
        set: function (value) {
            if (typeof value === 'undefined') {
                return;
            }
            if (this.showSuggestions === value) {
                return;
            }
            this.showSuggestions = value === true;
            this.showListChanged = true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    AutoCompleteComponent.prototype.ngAfterViewChecked = function () {
        if (this.showListChanged) {
            this.showListChanged = false;
            this.showSuggestions ? this.itemsShown.emit() : this.itemsHidden.emit();
        }
    };
    AutoCompleteComponent.prototype.ngDoCheck = function () {
        if (!this.hasFocus) {
            if (this.clearInvalidInput && (this.selected === null || this.multi)) {
                if (this.keyword !== '') {
                    this.keyword = '';
                }
                if (this.inputElem && this.inputElem.nativeElement) {
                    if (this.inputElem.nativeElement.children && this.inputElem.nativeElement.children.length !== 0) {
                        if (this.inputElem.nativeElement.children[0].children && this.inputElem.nativeElement.children[0].children.length !== 0) {
                            if (this.inputElem.nativeElement.children[0].children[0].value) {
                                this.inputElem.nativeElement.children[0].children[0].value = '';
                            }
                        }
                    }
                }
                if (this.searchbarElem && this.searchbarElem.nativeElement) {
                    if (this.searchbarElem.nativeElement.children && this.searchbarElem.nativeElement.children.length !== 0) {
                        if (this.searchbarElem.nativeElement.children[0].children) {
                            if (this.searchbarElem.nativeElement.children[0].children.length !== 0) {
                                if (this.searchbarElem.nativeElement.children[0].children[0].value) {
                                    this.searchbarElem.nativeElement.children[0].children[0].value = '';
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    /**
     * Handle document click
     *
     * @param event
     *
     * @private
     */
    AutoCompleteComponent.prototype.documentClickHandler = function (event) {
        if ((this.searchbarElem && this.searchbarElem.nativeElement && !this.searchbarElem.nativeElement.contains(event.target))
            ||
                (!this.inputElem && this.inputElem.nativeElement && this.inputElem.nativeElement.contains(event.target))) {
            this.hideItemList();
        }
    };
    /**
     * Get value from form
     *
     * @param selection
     *
     * @private
     */
    AutoCompleteComponent.prototype.getFormValue = function (selection) {
        if (selection == null || typeof this.dataProvider === 'function') {
            return null;
        }
        var attr = this.dataProvider.formValueAttribute == null ?
            this.dataProvider.labelAttribute : this.dataProvider.formValueAttribute;
        if (typeof selection === 'object' && attr) {
            return selection[attr];
        }
        return selection;
    };
    /**
     * Get element's position on screen
     *
     * @param el
     *
     * @private
     */
    AutoCompleteComponent.prototype._getPosition = function (el) {
        var xPos = 0;
        var yPos = 0;
        while (el) {
            if (el.tagName === 'BODY') {
                var xScroll = el.scrollLeft || document.documentElement.scrollLeft;
                var yScroll = el.scrollTop || document.documentElement.scrollTop;
                xPos += (el.offsetLeft - xScroll + el.clientLeft);
                yPos += (el.offsetTop - yScroll + el.clientTop);
            }
            else {
                xPos += (el.offsetLeft - el.scrollLeft + el.clientLeft);
                yPos += (el.offsetTop - el.scrollTop + el.clientTop);
            }
            el = el.offsetParent;
        }
        return {
            x: xPos,
            y: yPos
        };
    };
    AutoCompleteComponent.prototype.clickClear = function () {
        this.clearValue(true);
        this.itemsCleared.emit(true);
    };
    /**
     * Clear current input value
     *
     * @param hideItemList
     */
    AutoCompleteComponent.prototype.clearValue = function (hideItemList) {
        if (hideItemList === void 0) { hideItemList = false; }
        this.keyword = '';
        this.selection = null;
        this.formValue = null;
        if (hideItemList) {
            this.hideItemList();
        }
        this.focusedOption = -1;
        return;
    };
    /**
     * Get items for auto-complete
     *
     * @param event
     * @param show
     */
    AutoCompleteComponent.prototype.getItems = function (event, show) {
        var _this = this;
        this.isLoading = true;
        if (this.promise) {
            clearTimeout(this.promise);
        }
        this.promise = setTimeout(function () {
            if (event) {
                _this.keyword = event.detail.target.value;
            }
            var result;
            if (_this.showResultsFirst && _this.keyword.trim() === '') {
                _this.keyword = '';
            }
            if (typeof _this.dataProvider === 'function') {
                result = _this.dataProvider(_this.keyword);
                _this.setSuggestions(result, show);
                _this.isLoading = false;
            }
            else {
                result = _this.dataProvider.getResults(_this.keyword);
                if (result instanceof Subject) {
                    result = result.asObservable();
                }
                else if (result instanceof Promise) {
                    result = from(result);
                }
                if (result instanceof Observable) {
                    result.pipe(finalize(function () {
                        _this.isLoading = false;
                    })).subscribe(function (results) {
                        _this.setSuggestions(results, show);
                    }, function (error) { return console.error(error); });
                }
                else {
                    _this.setSuggestions(result, show);
                    _this.isLoading = false;
                }
            }
            _this.ionAutoInput.emit(_this.keyword);
        }, this.autocompleteOptions.debounce);
    };
    /**
     * Get an item's label
     *
     * @param selection
     */
    AutoCompleteComponent.prototype.getLabel = function (selection) {
        if (selection == null || typeof this.dataProvider === 'function') {
            return '';
        }
        var attr = this.dataProvider.formValueAttribute == null ?
            this.dataProvider.labelAttribute : this.dataProvider.formValueAttribute;
        var value = selection;
        if (this.dataProvider.getItemLabel) {
            value = this.dataProvider.getItemLabel(value);
        }
        if (!this.multi && typeof value !== 'undefined' && Object.prototype.toString.call(value) === '[object Array]') {
            if (value.length === 0) {
                return '';
            }
            else {
                value = value[0];
            }
        }
        if (typeof value === 'object' && attr) {
            return value[attr] || '';
        }
        return value || '';
    };
    /**
     * Get current selection
     */
    AutoCompleteComponent.prototype.getSelection = function () {
        if (this.multi) {
            return this.selection;
        }
        else {
            return this.selected;
        }
    };
    /**
     * Get menu style
     */
    AutoCompleteComponent.prototype.listStyles = function () {
        var listLocationStyles = this.listLocationStyles();
        return __assign({}, listLocationStyles, this.styles.list);
    };
    AutoCompleteComponent.prototype.listLocationStyles = function () {
        var location = this.location;
        if (this.location === 'auto') {
            var elementY = this._getPosition(this.searchbarElem.nativeElement).y;
            var windowY = window.innerHeight;
            if (elementY > windowY - elementY) {
                location = 'top';
            }
            else {
                location = 'bottom';
            }
        }
        if (location === 'bottom') {
            return {};
        }
        else {
            return {
                'bottom': '37px'
            };
        }
    };
    /**
     * Get current input value
     */
    AutoCompleteComponent.prototype.getValue = function () {
        return this.formValue;
    };
    /**
     * Handles tab key press.
     * If `selectOnTabOut` is `true`, will select currently focused item
     *
     * @param event
     */
    AutoCompleteComponent.prototype.handleTabOut = function (event) {
        if (this.selectOnTabOut && this.suggestions.length !== 0) {
            if (this.focusedOption !== -1) {
                this.selectItem(this.suggestions[this.focusedOption]);
            }
            else {
                this.hideItemList();
            }
        }
        else {
            this.hideItemList();
        }
        this.onBlur(event);
    };
    /**
     * Handle tap
     *
     * @param event
     */
    AutoCompleteComponent.prototype.handleTap = function (event) {
        if (this.showResultsFirst || this.keyword.length > 0) {
            this.getItems();
        }
    };
    /**
     * Handle tap when selecting an item
     *
     * @param $event
     * @param suggestion
     */
    AutoCompleteComponent.prototype.handleSelectTap = function ($event, suggestion) {
        if (typeof suggestion !== 'undefined') {
            this.selectItem(suggestion);
            if ($event.srcEvent) {
                if ($event.srcEvent.stopPropagation) {
                    $event.srcEvent.stopPropagation();
                }
                if ($event.srcEvent.preventDefault) {
                    $event.srcEvent.preventDefault();
                }
            }
            else if ($event.preventDefault) {
                $event.preventDefault();
            }
        }
        return false;
    };
    /**
     * Hide item list
     */
    AutoCompleteComponent.prototype.hideItemList = function () {
        if (this.showSuggestions === false && this.alwaysShowList === false) {
            this.showListChanged = true;
        }
        this.showSuggestions = this.alwaysShowList;
        this.focusedOption = -1;
    };
    AutoCompleteComponent.prototype.highlightItem = function (direction) {
        if (this.showSuggestions === false) {
            this.showItemList();
        }
        var max = this.suggestions.length - 1;
        if (direction < 0) {
            if (this.focusedOption === -1 || this.focusedOption === max) {
                this.focusedOption = 0;
            }
            else {
                this.focusedOption++;
            }
        }
        else if (direction > 0) {
            if (this.focusedOption === -1 || this.focusedOption === 0) {
                this.focusedOption = max;
            }
            else {
                this.focusedOption--;
            }
        }
    };
    /**
     * Fired when the input focused
     */
    AutoCompleteComponent.prototype.onFocus = function (event) {
        this.hasFocus = true;
        this.getItems();
        event = this._reflectName(event);
        this.autoFocus.emit(event);
        this.focus.emit(event);
    };
    /**
     * Fired when the input focused
     */
    AutoCompleteComponent.prototype.onBlur = function (event) {
        this.hasFocus = false;
        event = this._reflectName(event);
        this.autoBlur.emit(event);
        this.blur.emit(event);
    };
    AutoCompleteComponent.prototype._reflectName = function (event) {
        if (typeof event.srcElement.attributes['ng-reflect-name'] === 'object') {
            event.srcElement.name = event.srcElement.attributes['ng-reflect-name'].value;
        }
        return event;
    };
    /**
     * Register onChangeCallback
     *
     * @param fn
     */
    AutoCompleteComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * Register onTouchedCallback
     *
     * @param fn
     */
    AutoCompleteComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * Remove already selected suggestions
     *
     * @param suggestions
     */
    AutoCompleteComponent.prototype.removeDuplicates = function (suggestions) {
        var selectedCount = this.selected ? this.selected.length : 0;
        var suggestionCount = suggestions.length;
        for (var i = 0; i < selectedCount; i++) {
            var selectedLabel = this.getLabel(this.selected[i]);
            for (var j = 0; j < suggestionCount; j++) {
                var suggestedLabel = this.getLabel(suggestions[j]);
                if (selectedLabel === suggestedLabel) {
                    suggestions.splice(j, 1);
                }
            }
        }
        return suggestions;
    };
    AutoCompleteComponent.prototype.removeExcluded = function (suggestions) {
        var excludedCount = this.exclude.length;
        for (var i = 0; i < excludedCount; i++) {
            var excludeLabel = this.exclude[i];
            if (typeof excludeLabel === 'object') {
                excludeLabel = this.getLabel(excludeLabel);
            }
            var suggestionCount = suggestions.length;
            for (var j = 0; j < suggestionCount; j++) {
                var suggestedLabel = this.getLabel(suggestions[j]);
                if (excludeLabel === suggestedLabel) {
                    suggestions.splice(j, 1);
                    break;
                }
            }
        }
        return suggestions;
    };
    /**
     * Remove item from selected
     *
     * @param selection
     * @param notify?
     */
    AutoCompleteComponent.prototype.removeItem = function (selection, notify) {
        var count = this.selected ? this.selected.length : 0;
        for (var i = 0; i < count; i++) {
            var item = this.selected[i];
            var selectedLabel = this.getLabel(selection);
            var itemLabel = this.getLabel(item);
            if (selectedLabel === itemLabel) {
                this.selected.splice(i, 1);
            }
        }
        notify = typeof notify === 'undefined' ? true : notify;
        if (notify) {
            this.itemRemoved.emit(selection);
            this.itemsChange.emit(this.selected);
        }
        this.modelChange.emit(this.selected);
    };
    /**
     * Select item from list
     *
     * @param selection
     **/
    AutoCompleteComponent.prototype.selectItem = function (selection) {
        this.keyword = this.getLabel(selection);
        this.formValue = this.getFormValue(selection);
        this.hideItemList();
        this.updateModel(this.formValue);
        if (this.hideListOnSelection) {
            this.hideItemList();
        }
        if (this.multi) {
            if (this.maxSelected === null || this.selected.length <= this.maxSelected) {
                this.clearValue();
                this.selected.push(selection);
                this.itemsChange.emit(this.selected);
            }
            else {
                return;
            }
        }
        else {
            this.selection = selection;
            this.selected = [selection];
            this.itemsChange.emit(selection);
        }
        this.itemSelected.emit(selection);
        this.modelChange.emit(this.selected);
    };
    /**
     * Set focus of searchbar
     */
    AutoCompleteComponent.prototype.setFocus = function () {
        if (this.useIonInput && this.inputElem) {
            this.inputElem.nativeElement.setFocus();
        }
        else if (this.searchbarElem) {
            this.searchbarElem.nativeElement.setFocus();
        }
    };
    /**
     * Set suggestions
     *
     * @param suggestions
     * @param show
     */
    AutoCompleteComponent.prototype.setSuggestions = function (suggestions, show) {
        if (this.removeDuplicateSuggestions) {
            suggestions = this.removeDuplicates(suggestions);
            suggestions = this.removeExcluded(suggestions);
        }
        this.suggestions = suggestions;
        if (show || typeof show === 'undefined') {
            this.showItemList();
        }
        if (this.autoFocusSuggestion) {
            if (this.suggestions.length !== 0) {
                this.focusedOption = 0;
            }
        }
    };
    /**
     * Set current input value
     *
     * @param selection
     */
    AutoCompleteComponent.prototype.setValue = function (selection) {
        this.formValue = this.getFormValue(selection);
        this.keyword = this.getLabel(selection);
        return;
    };
    /**
     * Show item list
     */
    AutoCompleteComponent.prototype.showItemList = function () {
        if (this.showSuggestions === false) {
            this.showListChanged = true;
        }
        this.showSuggestions = true;
    };
    /**
     * Update the model
     */
    AutoCompleteComponent.prototype.updateModel = function (enteredText) {
        if (enteredText !== this.formValue) {
            this.formValue = enteredText;
            if (!this.multi) {
                this.selected = null;
            }
        }
        if (this.onChangeCallback) {
            this.onChangeCallback(this.formValue);
        }
        this.modelChange.emit(this.selected);
    };
    /**
     * Write value
     *
     * @param value
     */
    AutoCompleteComponent.prototype.writeValue = function (value) {
        if (value !== this.selection) {
            this.selection = value || null;
            this.formValue = this.getFormValue(this.selection);
            this.keyword = this.getLabel(this.selection);
        }
    };
    var AutoCompleteComponent_1;
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "alwaysShowList", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "autoFocusSuggestion", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "enableBrowserAutoComplete", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "clearInvalidInput", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "dataProvider", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "emptyTemplate", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "exclude", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "frontIcon", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "hideListOnSelection", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "keyword", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "location", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "maxResults", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "maxSelected", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "multi", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "removeButtonClasses", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "removeButtonColor", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "removeButtonIcon", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "removeButtonSlot", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "removeDuplicateSuggestions", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "selectionTemplate", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "selectOnTabOut", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "showResultsFirst", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "styles", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "template", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "useIonInput", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "model", null);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "options", null);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "modelChange", void 0);
    __decorate([
        Input()
    ], AutoCompleteComponent.prototype, "eager", null);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "blur", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "autoFocus", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "autoBlur", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "focus", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "ionAutoInput", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "itemsChange", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "itemsCleared", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "itemsHidden", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "itemRemoved", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "itemSelected", void 0);
    __decorate([
        Output()
    ], AutoCompleteComponent.prototype, "itemsShown", void 0);
    __decorate([
        ViewChild('searchbarElem', {
            read: ElementRef,
            static: false
        })
    ], AutoCompleteComponent.prototype, "searchbarElem", void 0);
    __decorate([
        ViewChild('inputElem', {
            read: ElementRef,
            static: false
        })
    ], AutoCompleteComponent.prototype, "inputElem", void 0);
    __decorate([
        HostListener('document:click', ['$event'])
    ], AutoCompleteComponent.prototype, "documentClickHandler", null);
    AutoCompleteComponent = AutoCompleteComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: AutoCompleteComponent_1,
                    multi: true
                }
            ],
            selector: 'ion-auto-complete',
            template: "<ng-template #defaultSelection\n             let-attrs=\"attrs\">\n    <ion-chip class=\"{{ attrs.removeButtonClasses }}\"\n              [color]=\"attrs.removeButtonColor\"\n              [outline]=\"true\">\n        <ion-icon *ngIf=\"frontIcon\"\n                  [name]=\"frontIcon\"\n                  [slot]=\"'start'\"\n                  color=\"primary\"></ion-icon>\n\n        <ion-label>{{ attrs.label }}</ion-label>\n\n        <ion-icon *ngIf=\"attrs.removeButtonIcon\"\n                  [name]=\"attrs.removeButtonIcon\"\n                  [slot]=\"attrs.removeButtonSlot\"></ion-icon>\n    </ion-chip>\n</ng-template>\n\n<div *ngIf=\"multi\">\n    <div *ngFor=\"let item of selected\"\n         class=\"selected-items\"\n         (click)=\"removeItem(item)\">\n        <ng-template [ngTemplateOutlet]=\"selectionTemplate || defaultSelection\"\n                     [ngTemplateOutletContext]=\"{\n                            attrs: {\n                              data:                item,\n                              label:               getLabel(item),\n                              removeButtonClasses: removeButtonClasses,\n                              removeButtonColor:   removeButtonColor,\n                              removeButtonIcon:    removeButtonIcon,\n                              removeButtonSlot:    removeButtonSlot\n                            }\n                         }\"></ng-template>\n    </div>\n</div>\n\n<ion-input #inputElem\n           [autocomplete]=\"enableBrowserAutoComplete ? 'on' : 'off'\"\n           [name]=\"name\"\n           (ionInput)=\"getItems($event)\"\n           (tap)=\"handleTap($event)\"\n           [(ngModel)]=\"keyword\"\n           (ngModelChange)=\"updateModel($event)\"\n           [placeholder]=\"autocompleteOptions.placeholder == null ? defaultOpts.placeholder : autocompleteOptions.placeholder\"\n           [type]=\"autocompleteOptions.type == null ? defaultOpts.type : autocompleteOptions.type\"\n           [clearOnEdit]=\"autocompleteOptions.clearOnEdit == null ? defaultOpts.clearOnEdit : autocompleteOptions.clearOnEdit\"\n           [clearInput]=\"autocompleteOptions.clearInput == null ? defaultOpts.clearInput : autocompleteOptions.clearInput\"\n           [color]=\"autocompleteOptions.color == null ? null : autocompleteOptions.color\"\n           [mode]=\"autocompleteOptions.mode == null ? defaultOpts.mode : autocompleteOptions.mode\"\n           [disabled]=\"disabled || (this.maxSelected !== null && this.selected.length >= this.maxSelected)\"\n           [ngClass]=\"{ 'hidden': !useIonInput, 'loading': isLoading }\"\n           [ngStyle]=\"styles.searchbar\"\n           (keydown.tab)=\"handleTabOut($event)\"\n           (keydown.shift.tab)=\"hideItemList()\"\n           (keyup.arrowDown)=\"highlightItem(-1)\"\n           (keyup.arrowUp)=\"highlightItem(1)\"\n           (keyup.enter)=\"handleSelectTap($event, suggestions[focusedOption])\"\n           (keyup.escape)=\"hideItemList()\"\n           (ionFocus)=\"onFocus($event)\"\n           (ionBlur)=\"onBlur($event)\"></ion-input>\n\n<ion-searchbar #searchbarElem\n               [autocomplete]=\"enableBrowserAutoComplete ? 'on' : 'off'\"\n               [name]=\"name\"\n               [animated]=\"autocompleteOptions.animated == null ? defaultOpts.animated : autocompleteOptions.animated\"\n               (ionInput)=\"getItems($event)\"\n               (tap)=\"handleTap($event)\"\n               [(ngModel)]=\"keyword\"\n               (ngModelChange)=\"updateModel($event)\"\n               [cancelButtonIcon]=\"autocompleteOptions.cancelButtonIcon == null ? defaultOpts.cancelButtonIcon : autocompleteOptions.cancelButtonIcon\"\n               [cancelButtonText]=\"autocompleteOptions.cancelButtonText == null ? defaultOpts.cancelButtonText : autocompleteOptions.cancelButtonText\"\n               [clearIcon]=\"autocompleteOptions.clearIcon == null ? defaultOpts.clearIcon : autocompleteOptions.clearIcon\"\n               [color]=\"autocompleteOptions.color == null ? null : autocompleteOptions.color\"\n               [showCancelButton]=\"autocompleteOptions.showCancelButton == null ?\n                                        (defaultOpts.showCancelButton ? 'always' : 'never') :\n                                        (autocompleteOptions.showCancelButton ? 'always' : 'never')\"\n               [debounce]=\"autocompleteOptions.debounce == null ? defaultOpts.debounce : autocompleteOptions.debounce\"\n               [placeholder]=\"autocompleteOptions.placeholder == null ? defaultOpts.placeholder : autocompleteOptions.placeholder\"\n               [autocorrect]=\"autocompleteOptions.autocorrect == null ? defaultOpts.autocorrect : autocompleteOptions.autocorrect\"\n               [mode]=\"autocompleteOptions.mode == null ? defaultOpts.mode : autocompleteOptions.mode\"\n               [searchIcon]=\"autocompleteOptions.searchIcon == null ? defaultOpts.searchIcon : autocompleteOptions.searchIcon\"\n               [spellcheck]=\"autocompleteOptions.spellcheck == null ? defaultOpts.spellcheck : autocompleteOptions.spellcheck\"\n               [type]=\"autocompleteOptions.type == null ? defaultOpts.type : autocompleteOptions.type\"\n               [ngClass]=\"{ 'hidden': useIonInput, 'loading': isLoading, 'disabled': disabled || (this.maxSelected !== null && this.selected.length >= this.maxSelected) }\"\n               [ngStyle]=\"styles.searchbar\"\n               (keydown.tab)=\"handleTabOut($event)\"\n               (keydown.shift.tab)=\"hideItemList()\"\n               (keyup.arrowDown)=\"highlightItem(-1)\"\n               (keyup.arrowUp)=\"highlightItem(1)\"\n               (keyup.enter)=\"handleSelectTap($event, suggestions[focusedOption])\"\n               (keyup.escape)=\"hideItemList()\"\n               (ionClear)=\"clickClear()\"\n               (ionFocus)=\"onFocus($event)\"\n               (ionBlur)=\"onBlur($event)\"></ion-searchbar>\n\n<ng-template #defaultTemplate\n             let-attrs=\"attrs\">\n    <span [innerHTML]='attrs.label | boldprefix:attrs.keyword'></span>\n</ng-template>\n\n<ng-template #defaultEmptyTemplate\n             let-attrs=\"attrs\"\n             class=\"ion-text-center\">\n    {{ autocompleteOptions.noItems }}\n</ng-template>\n\n<ul *ngIf=\"!(disabled || (this.maxSelected !== null && this.selected.length >= this.maxSelected)) && suggestions.length > 0 && showSuggestions\"\n    [ngStyle]=\"listStyles()\">\n    <li *ngFor=\"let suggestion of suggestions| slice:0:maxResults; let index = index\"\n        [ngClass]=\"{ 'focus': focusedOption === index }\"\n        [ngStyle]=\"styles.listItem\"\n        (mouseenter)=\"focusedOption = index\"\n        (click)=\"handleSelectTap($event, suggestion)\"\n        (tap)=\"handleSelectTap($event, suggestion)\">\n        <ng-template [ngTemplateOutlet]=\"template || defaultTemplate\"\n                     [ngTemplateOutletContext]=\"{\n                        attrs:{\n                          data:               suggestion,\n                          label:              getLabel(suggestion),\n                          keyword:            keyword,\n                          formValue:          getFormValue(suggestion),\n                          labelAttribute:     getLabel(suggestion),\n                          formValueAttribute: getFormValue(suggestion)\n                        }\n                     }\"></ng-template>\n    </li>\n</ul>\n\n<ul *ngIf=\"suggestions.length === 0 && showSuggestions\"\n    [ngStyle]=\"listStyles()\">\n    <li [ngStyle]=\"styles.listItem\">\n        <ng-template [ngTemplateOutlet]=\"emptyTemplate || defaultEmptyTemplate\"\n                     [ngTemplateOutletContext]=\"{\n                        attrs:{\n                          keyword: keyword\n                        }\n                     }\"></ng-template>\n    </li>\n</ul>\n",
            styles: ["ion-auto-complete{overflow:hidden!important;width:90vw;display:inline-block}ion-auto-complete ion-searchbar{padding:1px!important}ion-auto-complete .disabled input.searchbar-input{pointer-events:none;cursor:default}ion-auto-complete ul{position:absolute;width:90vw;margin-top:0;background:#fff;list-style-type:none;padding:0;left:16px;z-index:999;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12)}ion-auto-complete ul li{padding:15px;border-bottom:1px solid #c1c1c1}ion-auto-complete ul ion-auto-complete-item{height:40px;width:100%}ion-auto-complete ul li:last-child{border:none}ion-auto-complete ul li.focus,ion-auto-complete ul li:focus{cursor:pointer;background:#f1f1f1}ion-auto-complete .hidden{display:none}ion-auto-complete .loading input.searchbar-input{background:url(/assets/loading.gif) right 4px center/25px 25px no-repeat #fff}ion-auto-complete .searchbar-clear-button.sc-ion-searchbar-md{right:34px}ion-auto-complete .selected-items{float:left}"]
        })
    ], AutoCompleteComponent);
    return AutoCompleteComponent;
}());

/**
 * Bolds the beginning of the matching string in the item
 */
var BoldPrefix = /** @class */ (function () {
    function BoldPrefix() {
    }
    BoldPrefix.prototype.transform = function (value, keyword) {
        if (!keyword) {
            return value;
        }
        var escaped_keyword = keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        return value.replace(new RegExp(escaped_keyword, 'gi'), function (str) {
            return str.bold();
        });
    };
    BoldPrefix = __decorate([
        Pipe({
            name: 'boldprefix'
        }),
        Injectable()
    ], BoldPrefix);
    return BoldPrefix;
}());

var AutoCompleteModule = /** @class */ (function () {
    function AutoCompleteModule() {
    }
    AutoCompleteModule_1 = AutoCompleteModule;
    AutoCompleteModule.forRoot = function () {
        return {
            ngModule: AutoCompleteModule_1,
            providers: []
        };
    };
    var AutoCompleteModule_1;
    AutoCompleteModule = AutoCompleteModule_1 = __decorate([
        NgModule({
            declarations: [
                AutoCompleteComponent,
                BoldPrefix
            ],
            exports: [
                AutoCompleteComponent,
                BoldPrefix
            ],
            imports: [
                CommonModule,
                FormsModule,
                IonicModule
            ]
        })
    ], AutoCompleteModule);
    return AutoCompleteModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AutoCompleteComponent, AutoCompleteModule, AutoCompleteOptions, BoldPrefix };
//# sourceMappingURL=ionic4-auto-complete.js.map
